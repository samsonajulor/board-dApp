/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ColorBoardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BOARD_SIZE_X"
      | "BOARD_SIZE_Y"
      | "board"
      | "colors"
      | "getColor"
      | "setColor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BOARD_SIZE_X",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BOARD_SIZE_Y",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "board",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "colors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getColor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setColor",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BOARD_SIZE_X",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BOARD_SIZE_Y",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "board", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "colors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getColor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setColor", data: BytesLike): Result;
}

export interface ColorBoard extends BaseContract {
  connect(runner?: ContractRunner | null): ColorBoard;
  waitForDeployment(): Promise<this>;

  interface: ColorBoardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BOARD_SIZE_X: TypedContractMethod<[], [bigint], "view">;

  BOARD_SIZE_Y: TypedContractMethod<[], [bigint], "view">;

  board: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  colors: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getColor: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [string],
    "view"
  >;

  setColor: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, color: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BOARD_SIZE_X"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BOARD_SIZE_Y"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "board"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "colors"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getColor"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setColor"
  ): TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, color: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
